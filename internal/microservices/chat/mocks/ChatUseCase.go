// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	models "dripapp/internal/microservices/chat/models"

	mock "github.com/stretchr/testify/mock"
)

// ChatUseCase is an autogenerated mock type for the ChatUseCase type
type ChatUseCase struct {
	mock.Mock
}

// ClientHandler provides a mock function with given fields: c, io
func (_m *ChatUseCase) ClientHandler(c context.Context, io models.IOMessage) error {
	ret := _m.Called(c, io)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.IOMessage) error); ok {
		r0 = rf(c, io)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteChat provides a mock function with given fields: c, fromId
func (_m *ChatUseCase) DeleteChat(c context.Context, fromId uint64) error {
	ret := _m.Called(c, fromId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(c, fromId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetChat provides a mock function with given fields: c, fromId, lastId
func (_m *ChatUseCase) GetChat(c context.Context, fromId uint64, lastId uint64) ([]models.Message, error) {
	ret := _m.Called(c, fromId, lastId)

	var r0 []models.Message
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) []models.Message); ok {
		r0 = rf(c, fromId, lastId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64, uint64) error); ok {
		r1 = rf(c, fromId, lastId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChats provides a mock function with given fields: c
func (_m *ChatUseCase) GetChats(c context.Context) ([]models.Chat, error) {
	ret := _m.Called(c)

	var r0 []models.Chat
	if rf, ok := ret.Get(0).(func(context.Context) []models.Chat); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Chat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
