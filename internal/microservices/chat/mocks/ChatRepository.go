// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	models "dripapp/internal/microservices/chat/models"

	mock "github.com/stretchr/testify/mock"
)

// ChatRepository is an autogenerated mock type for the ChatRepository type
type ChatRepository struct {
	mock.Mock
}

// DeleteChat provides a mock function with given fields: ctx, userId, fromId
func (_m *ChatRepository) DeleteChat(ctx context.Context, userId uint64, fromId uint64) error {
	ret := _m.Called(ctx, userId, fromId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) error); ok {
		r0 = rf(ctx, userId, fromId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetChat provides a mock function with given fields: ctx, userId, fromId, lastId
func (_m *ChatRepository) GetChat(ctx context.Context, userId uint64, fromId uint64, lastId uint64) ([]models.Message, error) {
	ret := _m.Called(ctx, userId, fromId, lastId)

	var r0 []models.Message
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64, uint64) []models.Message); ok {
		r0 = rf(ctx, userId, fromId, lastId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64, uint64, uint64) error); ok {
		r1 = rf(ctx, userId, fromId, lastId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChats provides a mock function with given fields: ctx, userId
func (_m *ChatRepository) GetChats(ctx context.Context, userId uint64) ([]models.Chat, error) {
	ret := _m.Called(ctx, userId)

	var r0 []models.Chat
	if rf, ok := ret.Get(0).(func(context.Context, uint64) []models.Chat); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Chat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveMessage provides a mock function with given fields: userId, toId, text
func (_m *ChatRepository) SaveMessage(userId uint64, toId uint64, text string) (models.Message, error) {
	ret := _m.Called(userId, toId, text)

	var r0 models.Message
	if rf, ok := ret.Get(0).(func(uint64, uint64, string) models.Message); ok {
		r0 = rf(userId, toId, text)
	} else {
		r0 = ret.Get(0).(models.Message)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, uint64, string) error); ok {
		r1 = rf(userId, toId, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
